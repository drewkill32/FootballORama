// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsRadarTest.Models;

namespace SportsRadarTest.Migrations
{
    [DbContext(typeof(DivisionDataConext))]
    partial class DivisionDataConextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview6.19304.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportsRadarTest.Models.Conference", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("DivisionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Division", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Game", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("AwayId");

                    b.Property<string>("AwayRotation");

                    b.Property<string>("Coverage");

                    b.Property<string>("HomeId");

                    b.Property<string>("HomeRotation");

                    b.Property<bool>("NeutralSite");

                    b.Property<DateTime>("Scheduled");

                    b.Property<string>("Status");

                    b.Property<string>("VenueId");

                    b.Property<string>("WeekId");

                    b.HasKey("Id");

                    b.HasIndex("AwayId");

                    b.HasIndex("HomeId");

                    b.HasIndex("VenueId");

                    b.HasIndex("WeekId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Season");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Subdivision", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConferenceId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Subdivisions");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Team", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConferenceId");

                    b.Property<string>("Market");

                    b.Property<string>("Name");

                    b.Property<string>("SubdivisionId");

                    b.Property<string>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("SubdivisionId");

                    b.HasIndex("VenueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Venue", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Address");

                    b.Property<int>("Capacity");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<string>("Surface");

                    b.Property<string>("Type");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Week", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("Number");

                    b.Property<int?>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Conference", b =>
                {
                    b.HasOne("SportsRadarTest.Models.Division", null)
                        .WithMany("Conferences")
                        .HasForeignKey("DivisionId");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Game", b =>
                {
                    b.HasOne("SportsRadarTest.Models.Team", "Away")
                        .WithMany()
                        .HasForeignKey("AwayId");

                    b.HasOne("SportsRadarTest.Models.Team", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId");

                    b.HasOne("SportsRadarTest.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");

                    b.HasOne("SportsRadarTest.Models.Week", null)
                        .WithMany("Games")
                        .HasForeignKey("WeekId");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Subdivision", b =>
                {
                    b.HasOne("SportsRadarTest.Models.Conference", null)
                        .WithMany("Subdivisions")
                        .HasForeignKey("ConferenceId");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Team", b =>
                {
                    b.HasOne("SportsRadarTest.Models.Conference", null)
                        .WithMany("Teams")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("SportsRadarTest.Models.Subdivision", null)
                        .WithMany("Teams")
                        .HasForeignKey("SubdivisionId");

                    b.HasOne("SportsRadarTest.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("SportsRadarTest.Models.Week", b =>
                {
                    b.HasOne("SportsRadarTest.Models.Schedule", null)
                        .WithMany("Weeks")
                        .HasForeignKey("ScheduleId");
                });
#pragma warning restore 612, 618
        }
    }
}
